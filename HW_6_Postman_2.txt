HW_2 Postman

============================================================================================================

http://162.55.220.72:5005/first

1. Отправить запрос.

	GET {{url}}/first

2. Статус код 200

	pm.test("Status code is 200", function () {
    	pm.response.to.have.status(200);
	});

3. Проверить, что в body приходит правильный string.

	pm.test("Body is correct", function () {
    	pm.response.to.have.body("This is the first responce from server!ss");
	});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.

	POST {{url}}/user_info_3

2. Статус код 200

	pm.test("Status code is 200", function () {
    	pm.response.to.have.status(200);
});

3. Спарсить response body в json.

	var jsonData = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.)

	pm.test("Check value 'name'", function () {
    	var jsonData = pm.response.json();
    	pm.expect(jsonData.name).to.eql('Adele');
	});

5. Проверить, что age в ответе равно age s request (age вбить руками.)

	pm.test("Check value 'name'", function () {
    	var jsonData = pm.response.json();
    	pm.expect(jsonData.age).to.eql('35');
	});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

	pm.test("Check value 'salary'", function () {
    	var jsonData = pm.response.json();
    	pm.expect(jsonData.salary).to.eql(1000);
	});

7. Спарсить request.

	let req = request.data;

8. Проверить, что name в ответе равно name s request (name забрать из request.)

	let req_name = req.name;

	pm.test("Check value 'name' from request", function () {
    	var jsonData = pm.response.json();
    	pm.expect(jsonData.name).to.eql(req_name);
	});

9. Проверить, что age в ответе равно age s request (age забрать из request.)

	let req_age = req.age;

	pm.test("Check'age' from response == 'age' from request", function () {
   	var jsonData = pm.response.json();
    	pm.expect(jsonData.age).to.eql(req_age);
	});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

	let req_salary = +req.salary;

	pm.test("Check'salary' from response == 'salary' from request", function () {
    	var jsonData = pm.response.json();
    	pm.expect(jsonData.salary).to.eql(req_salary);
	});

11. Вывести в консоль параметр family из response.

	let jsonData = pm.response.json();
	console.log(jsonData.family);

	{children: [2], pets: {…}, u_salary_1_5_year: 4000}

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

	let req_salary_4 = req_salary * 4;

	pm.test("Check'u_salary_1_5_year' from response == 'salary' * 4 from request", function () {
    	pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary_4);
	});

============================================================================================================

http://162.55.220.72:5005/object_info_3

1. Отправить запрос.

	GET {{url}}/object_info_3?salary=1000&name=Adele&age=35

2. Статус код 200

	pm.test("Status code is 200", function () {
    	pm.response.to.have.status(200);
	});

3. Спарсить response body в json.

	let jsonData = pm.response.json();

4. Спарсить request.

	let get_params = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)

	let req_name = get_params.name;

	pm.test("Check'name' from response == 'name' from request", function () {
    	pm.expect(jsonData.name).to.eql(req_name);

6. Проверить, что age в ответе равно age s request (age забрать из request.)

	let req_age = get_params.age;

	pm.test("Check'age' from response == 'age' from request", function () {
	pm.expect(jsonData.age).to.eql(req_age);
	});

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

	pm.test("Check'salary' from response == 'salary' from request", function () {
	pm.expect(jsonData.salary).to.eql(req_salary);
	});

8. Вывести в консоль параметр family из response.

	console.log(jsonData.family);

9. Проверить, что у параметра dog есть параметры name.

	pm.test("Check parameter 'name' in 'dog'", function () {
    	pm.expect(jsonData.family.pets.dog).to.have.property('name');
	});

10. Проверить, что у параметра dog есть параметры age.

	pm.test("Check parameter 'age' in 'dog'", function () {
   	pm.expect(jsonData.family.pets.dog).to.have.property('age');
	});

11. Проверить, что параметр name имеет значение Luky.

	pm.test("Check value 'name' in family.pets.dog", function () {
    	pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');
	});

12. Проверить, что параметр age имеет значение 4.

	pm.test("Check value 'age' in family.pets.dog'", function () {
    	pm.expect(jsonData.family.pets.dog.age).to.eql(4);
	});

============================================================================================================

http://162.55.220.72:5005/object_info_4

1. Отправить запрос.

	GET {{url}}/object_info_4?name=Adelle&age=35&salary=1000

2. Статус код 200

	pm.test("Status code is 200", function () {
    	pm.response.to.have.status(200);
	});

3. Спарсить response body в json.

	let jsonData = pm.response.json();

4. Спарсить request.

	let get_params = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)

	pm.test("request name == response name", function () {
    	pm.expect(jsonData.name).to.eql(req_name);
	});

6. Проверить, что age в ответе равно age из request (age забрать из request.)

	let req_age = +req.age;

	pm.test("request age == response age", function () {
    	pm.expect(jsonData.age).to.eql(req_age);
	});

7. Вывести в консоль параметр salary из request.

	console.log(req.salary);
	'1000'

8. Вывести в консоль параметр salary из response.

	console.log(jsonData.salary);
	[1000, "2000", "3000"]

9. Вывести в консоль 0-й элемент параметра salary из response.

	console.log(jsonData.salary);

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.

	console.log(jsonData.salary[1]);
	'2000'

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.

	console.log(jsonData.salary[2]);
	'3000'

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

	let req_salary = +req.salary;

	pm.test("request salary == response salsary[0]", function () {
    	pm.expect(jsonData.salary[0]).to.eql(req_salary);
	});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

	let req_salary_2 = String(req_salary * 2);

	pm.test("request salary * 2 == response salsary[1]", function () {
    	pm.expect(jsonData.salary[1]).to.eql(req_salary_2);
	});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

let req_salary_3 = String(req_salary * 3)

	pm.test("request salary * 3 == response salsary[2]", function () {
    	pm.expect(jsonData.salary[2]).to.eql(req_salary_3);
	});

15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

	for (let value of jsonData.salary) {
  	console.log(value);
	};

============================================================================================================

http://162.55.220.72:5005/user_info_2

1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
	GET {{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}
5. Статус код 200

	pm.test("Status code is 200", function () {
    	pm.response.to.have.status(200);
	});

6. Спарсить response body в json.

	jsonData = pm.response.json()

7. Спарсить request.

	req = request.data;

8. Проверить, что json response имеет параметр start_qa_salary

	pm.test("Check parameter 'start_qa_salary'", function () {
    	pm.expect(jsonData).to.have.property('start_qa_salary');
	});

9. Проверить, что json response имеет параметр qa_salary_after_6_months

	pm.test("Check parameter 'qa_salary_after_6_months'", function () {
    	pm.expect(jsonData).to.have.property('qa_salary_after_6_months');
	});

10. Проверить, что json response имеет параметр qa_salary_after_12_months

	pm.test("Check parameter 'qa_salary_after_12_months'", function () {
    	pm.expect(jsonData).to.have.property('qa_salary_after_12_months');
	});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year

	pm.test("Check parameter 'qa_salary_after_1.5_year'", function () {
    	pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');
	});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years

	pm.test("Check parameter 'qa_salary_after_3.5_years'", function () {
    	pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');
	});

13. Проверить, что json response имеет параметр person

	pm.test("Check parameter 'person'", function () {
    	pm.expect(jsonData).to.have.property('person');
	});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)

	pm.test("Check salary == start_qa_salary", function () {
    	pm.expect(jsonData.start_qa_salary).to.eql(req_salary);
	});

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)

	pm.test("Check salary * 2 == qa_salary_after_6_months", function () {
    	pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary_2);
	});

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)

	pm.test("Check salary * 2.7 == qa_salary_after_12_months", function () {
    	pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary_2_7);
	});

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)


	pm.test("Check salary * 3.3 == qa_salary_after_1.5_year", function () {
    	pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req_salary_3_3);
	});

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)

	pm.test("Check salary * 3.8 == qa_salary_after_3.5_years", function () {
    	pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req_salary_3_8);
	});

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)

	pm.test("Check u_name[1] == salary", function () {
    	pm.expect(jsonData.person.u_name[1]).to.eql(req_salary);
	});

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)

	pm.test("Check person.u_age == age", function () {
    	pm.expect(jsonData.person.u_age).to.eql(req_age);
	});

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)

	pm.test("Check salary * 2 == qa_salary_after_6_months", function () {
   	pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary_4_2);
	});

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

	for (var key of Object.keys(jsonData)) {
  	console.log(key);
	};